# -----------------------------------------------------------------------------
#                        SLAM system definition for MOLA
# This file defines:
# a live sensor input (Velodyne scanner). No SLAM, just shows the received data
# -----------------------------------------------------------------------------

modules:
# Offline or online sensory data sources =====================
  - type: mola::GenericSensor
    name: velodyne_input
    execution_rate: 100 # Hz (max processing rate)
    #verbosity_level: INFO
    gui_preview_sensors:
      - raw_sensor_label: Velodyne1_SCAN
        decimation: 1
        win_pos: 5 5 400 400
    # GenericSensor parameters are the same than those in share/mrpt/rawlog_grabber/*.ini
    # which can be converted to YAML using the mrpt tool "ini2yaml".
    # Refer to docs for http://mrpt.ual.es/reference/devel/classmrpt_1_1hwdrivers_1_1_c_generic_sensor.html
    # for possible sensors and available parameters.
    params:
      driver: CVelodyneScanner
      # Optional but recommended: put here your vendor-provided calibration file
      #calibration_file: PUT_HERE_FULL_PATH_TO_CALIB_FILE.xml
      # model: Can be any of: `VLP16`,`HDL32`,`HDL64`  (It is used to load default calibration file. Parameter not required if `calibration_file` is provided.
      model: VLP16
      # ---- Online operation ----
      # IP address of the device. UDP packets from other IPs will be ignored. Leave commented or blank
      # if only one scanner is present (no IP filtering)
      #device_ip: 10.0.0.100
      # Sensor RPM (Default: unchanged). Requires setting `device_ip`
      # If set, an HTTP request will be issued to change the device settings.
      #rpm: 300
      # Any of: 'STRONGEST', 'LAST', 'DUAL'. Requires setting `device_ip`
      # If set, an HTTP request will be issued to change the device settings.
      #return_type: STRONGEST
      # ---- Offline operation ----
      # If uncommented, and non-empty, this class will read from the PCAP instead of connecting and listening
      # for online network packets.
      #pcap_input: ${PCAP_INPUT}
      #pcap_read_once: false    # Do not loop
      #pcap_read_fast: false    # fast forward skipping non-velodyne packets
      #pcap_read_full_scan_delay_ms: 100  # Used to simulate a reasonable number of full scans / second
      #pcap_repeat_delay: 0.0  #  seconds
      # ---- Save to PCAP file ----
      # If uncommented, a PCAP file named `[pcap_output_prefix]_[DATE_TIME].pcap` will be
      # written simultaneously to the normal operation of this class.
      #pcap_output: velodyne_log
      #
      # Sensor pose on the robot/vehicle:
      pose_pitch: 0
      pose_roll: 0
      pose_x: 0
      pose_y: 0
      pose_yaw: 0
      pose_z: 0
      # This driver will generate observations:
      # - ${sensorLabel}_SCAN: Velodyne scans
      # - ${sensorLabel}_GPS: RMC GPS frames
      sensorLabel: Velodyne1
